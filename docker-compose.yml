version: '3.8'

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_PREFIX}_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app_network

  # ===== REDIS =====
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_PREFIX}_redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - app_network

  # ===== BACKEND API =====
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ${PROJECT_PREFIX}_backend
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - PROJECT_NAME=${PROJECT_NAME}
      - CACHE_KEY_PREFIX=${CACHE_KEY_PREFIX}
    volumes:
      - ./backend:/app
      - static_data:/app/staticfiles
      - media_data:/app/media
      - logs_data:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - app_network

  # ===== CELERY WORKER =====
  celery_worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ${PROJECT_PREFIX}_celery_worker
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - PROJECT_NAME=${PROJECT_NAME}
    volumes:
      - ./backend:/app
      - media_data:/app/media
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A config worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - app_network

  # ===== CELERY BEAT =====
  celery_beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ${PROJECT_PREFIX}_celery_beat
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - PROJECT_NAME=${PROJECT_NAME}
    volumes:
      - ./backend:/app
      - logs_data:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped
    networks:
      - app_network

  # ===== FLOWER (Celery Monitoring) =====
  flower:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: ${PROJECT_PREFIX}_flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin123}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    depends_on:
      - redis
      - celery_worker
    command: celery -A config flower --port=5555 --url_prefix=flower
    restart: unless-stopped
    networks:
      - app_network

  # ===== FRONTEND (Next.js) =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: ${PROJECT_PREFIX}_frontend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_SITE_NAME=${NEXT_PUBLIC_SITE_NAME}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app_network

  # ===== NGINX =====
  nginx:
    image: nginx:1.24-alpine
    container_name: ${PROJECT_PREFIX}_nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_data:/var/www/static
      - media_data:/var/www/media
      - logs_data:/var/log/nginx_app
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app_network

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_data:
    driver: local
  media_data:
    driver: local
  logs_data:
    driver: local

# ===== NETWORKS =====
networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16